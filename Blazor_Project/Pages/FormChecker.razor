@page "/passwordchecker"
@using Microsoft.AspNetCore.Components.Forms
@using Blazor_Project.Services
@inject PasswordStrengthService passwordCheck
@inject ILogger<FormChecker> logger;
<link rel="stylesheet" href="css/FormChecker.css">

<div class="pass-input-wrapper">
    <h1 class="pass-title">Password strength</h1>
    <label class="pass-label">
        Supports only a combination of
        <br>
        <span @class="-invalid: !IsPasswordValid ? 'pass-invalid' : ''">digits/letters/symbols</span>
    </label>
    <InputText class="pass-input" @bind-Value="inputChecker" onchange="CheckPassword" placeholder="Enter your password here" />

    <div class="pass-marker">
        <span class="@SpanOneClass" id="spanOne"></span>
        <span class="@SpanTwoClass" id="spanTwo"></span>
        <span class="@SpanThreeClass" id="spanThree"></span>
    </div>
</div>

@code {
    private string inputChecker = "";
    private bool IsPasswordValid => passwordCheck.IsEasyValidationPassed(inputChecker);
    private bool IsPasswordEasy => passwordCheck.IsEasyValidationPassed(inputChecker);
    private bool IsPasswordMedium => passwordCheck.IsMediumValidationPassed(inputChecker);
    private bool IsPasswordStrong => passwordCheck.IsStrongValidationPassed(inputChecker);

    private string SpanOneClass
    {
        get
        {
            if (string.IsNullOrEmpty(inputChecker))
            {
                return "spanColors invalid";
            }
            else if (inputChecker.Length < 8)
            {
                return "spanColors easy";
            }
            else if (IsPasswordEasy)
            {
                return "spanColors easy";
            }
            else if (IsPasswordMedium)
            {
                return "spanColors medium";
            }
            else if (IsPasswordStrong)
            {
                return "spanColors strong";
            }
            else
            {
                return "spanColors invalid";
            }
        }
    }

    private string SpanTwoClass
    {
        get
        {
            if (string.IsNullOrEmpty(inputChecker))
            {
                return "spanColors invalid";
            }
            else if (inputChecker.Length < 8)
            {
                return "spanColors easy";
            }
            else if (IsPasswordEasy)
            {
                return "spanColors invalid";
            }
            else if (IsPasswordMedium)
            {
                return "spanColors medium";
            }
            else if (IsPasswordStrong)
            {
                return "spanColors strong";
            }
            else
            {
                return "spanColors invalid";
            }
        }
    }

    private string SpanThreeClass
    {
        get
        {
            if (string.IsNullOrEmpty(inputChecker))
            {
                return "spanColors invalid";
            }
            else if (inputChecker.Length < 8)
            {
                return "spanColors easy";
            }
            else if (IsPasswordEasy)
            {
                return "spanColors invalid";
            }
            else if (IsPasswordMedium)
            {
                return "spanColors invalid";
            }
            else if (IsPasswordStrong)
            {
                return "spanColors strong";
            }
            else
            {
                return "spanColors invalid";
            }
        }
    }

    private void CheckPassword(ChangeEventArgs e)
    {
        // You can perform additional logic here if needed
        // Currently, the styling is already being updated based on IsPasswordValid
    }
}